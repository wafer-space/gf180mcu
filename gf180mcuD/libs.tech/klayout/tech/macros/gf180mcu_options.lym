<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Load PDK options</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Load PDK options</group-name>
 <menu-path>submenu&gt;end("gf180mcu PDK").end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>module MyMacro
require 'yaml'
 
  include RBA
  
  #####################################################################################
  # Loading options
  #####################################################################################
  mw = RBA::MainWindow::instance
  
  # create a toolbar submenu
  mw.menu.insert_menu("submenu.end", "drc_menu", "Klayout DRC Options")
  mw.menu.insert_menu("submenu.end", "lvs_menu", "Klayout LVS Options")
  #mw.menu.insert_separator("submenu.drc_menu.end", "name1")
  mw.menu.insert_separator("submenu.lvs_menu+", "name2")
  
  
  #####################################################################################
  # Adding DRC options
  #####################################################################################
  
  #1 Setting run mode
  run_mode_drc_action = RBA::Action::new
  run_mode_drc_action.title = "Run mode"
  run_mode_drc_action.on_triggered do
  
      run_mode_select = RBA::InputDialog::ask_item("Run mode", "Select run mode:", [ "tiling", "deep", "flat" ], 1)
      options = YAML.load(File.read(__dir__ + "/drc_options.yml"))
      if run_mode_select 
          options["run_mode"]= run_mode_select
          File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
          options["run_mode"]= ""
          File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "run_mode", run_mode_drc_action)
  
  #2 Setting variant
  variant_drc_action = RBA::Action::new
  variant_drc_action.title = "Variant options"
  variant_drc_action.on_triggered do
    
    variant_select = RBA::InputDialog::ask_item("Variant options", "Select variant option:", [ "A", "B", "C" , "D"], 2)
      options = YAML.load(File.read(__dir__ + "/drc_options.yml"))
      if variant_select
        options["variant"] = variant_select
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }    
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "variant", variant_drc_action)

  #3 Adding Top cell name
  top_cell_action = RBA::Action::new
  top_cell_action.title = "Top_cell name"
  top_cell_action.on_triggered do
    top_cell_name = RBA::InputDialog::ask_string("Top cell name", "Please enter Top_cell name", "TOP")
      options = YAML.load(File.read(__dir__ + "/drc_options.yml")) 
      if top_cell_name 
        options["top_cell_name"] = top_cell_name
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "TOP_cell_name", top_cell_action)
  
  #5 Setting verbose mode
  verbose_drc_action = RBA::Action::new
  verbose_drc_action.title = "Verbose mode"
  verbose_drc_action.checkable=(true)
  verbose_drc_action.checked=(false)
  verbose_drc_action.on_triggered do
    
      options = YAML.load(File.read(__dir__ + "/drc_options.yml"))
      if verbose_drc_action.is_checked?
        options["verbose"] = "true"
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      else
        options["verbose"] = "false"
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "verbose", verbose_drc_action)
  
  #4 Setting FEOL rules
  feol_action = RBA::Action::new
  feol_action.title = "FEOL rules"
  feol_action.checkable=(true)
  feol_action.checked=(true)
  feol_action.on_triggered do
      options = YAML.load(File.read(__dir__ + "/drc_options.yml"))
      if feol_action.is_checked?
        options["feol"] = true
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      else
        options["feol"] = false
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "feol", feol_action)
  
  #6 Setting BEOL rules
  beol_action = RBA::Action::new
  beol_action.title = "BEOL rules"
  beol_action.checkable=(true)
  beol_action.checked=(true)
  beol_action.on_triggered do
    options = YAML.load(File.read(__dir__ + "/drc_options.yml"))
      if beol_action.is_checked?
        options["beol"] = true
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["beol"] = false
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "beol", beol_action)
  
  #7 Setting offgrid rules
  offgrid_action = RBA::Action::new
  offgrid_action.title = "Offgrid rules"
  offgrid_action.checkable=(true)
  offgrid_action.checked=(true)
  offgrid_action.on_triggered do
    options = YAML.load(File.read(__dir__ + "/drc_options.yml"))
      if offgrid_action.is_checked?
        options["offgrid"] = "true"
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["offgrid"] = "false"
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "offgrid", offgrid_action)
  
  #8 Setting connectivity rules
  connectivity_action = RBA::Action::new
  connectivity_action.title = "Connectivity rules"
  connectivity_action.checkable=(true)
  connectivity_action.checked=(false)
  connectivity_action.on_triggered do
    options = YAML.load(File.read(__dir__ + "/drc_options.yml")) 
      if connectivity_action.is_checked?
        options["connectivity"] = "true"
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["connectivity"] = "false"
        File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.drc_menu.end", "connectivity", connectivity_action)
  
  #####################################################################################
  # Adding LVS options
  #####################################################################################
  
  #1 Adding substrate name
  run_action = RBA::Action::new
  run_action.title = "Substrate name"
  run_action.on_triggered do
    sub_name = RBA::InputDialog::ask_string("Substrate name", "Please enter substrate name", "gf180mcu_gnd")
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if sub_name 
        options["sub_name"] = sub_name
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "SUB_name", run_action)
  
  #2 Setting run mode
  run_mode_action = RBA::Action::new
  run_mode_action.title = "Run mode"
  run_mode_action.on_triggered do
  
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      run_mode_select = RBA::InputDialog::ask_item("Run mode", "Select run mode:", [ "tiling", "deep", "flat" ], 1)
      if run_mode_select 
        options["run_mode"] = run_mode_select
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "run_mode", run_mode_action)
  
  #3 Setting stack
  variant_action = RBA::Action::new
  variant_action.title = "variant options"
  variant_action.on_triggered do
    
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      variant_select = RBA::InputDialog::ask_item("Variant options", "Select variant option:", [ "A", "B", "C", "D" ], 2)
      if variant_select 
        options["variant"] = variant_select
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "variant", variant_action)

  #4 Adding netlist path
  netlist_action = RBA::Action::new
  netlist_action.title = "Netlist Path"
  netlist_action.on_triggered do
    netlist_path = RBA::InputDialog::ask_string("Netlist Path", "Please enter Netlist Path", "")
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if netlist_path
        options["netlist"] = netlist_path
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "Netlist_path", netlist_action)

  #5 Adding Top cell name
  top_cell_action = RBA::Action::new
  top_cell_action.title = "Top_cell name"
  top_cell_action.on_triggered do
    top_cell_name = RBA::InputDialog::ask_string("Top cell name", "Please enter Top_cell name", "TOP")
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if top_cell_name 
        options["top_cell_name"] = top_cell_name
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "TOP_cell_name", top_cell_action)
  
  #7 Setting spice net names
  spice_net_action = RBA::Action::new
  spice_net_action.title = "SPICE net name"
  spice_net_action.checkable=(true)
  spice_net_action.checked=(true)
  spice_net_action.on_triggered do
    
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if spice_net_action.is_checked?
        options["spice_net"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["spice_net"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "SPICE_net_name", spice_net_action)
  
  #8 Setting spice comments
  spice_comment_action = RBA::Action::new
  spice_comment_action.title = "SPICE comments"
  spice_comment_action.checkable=(true)
  spice_comment_action.checked=(false)
  spice_comment_action.on_triggered do
    
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if spice_comment_action.is_checked?
        options["spice_comment"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["spice_comment"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "SPICE_comments", spice_comment_action)
  
  #9 Setting scaling
  scale_action = RBA::Action::new
  scale_action.title = "Scaling x10^6"
  scale_action.checkable=(true)
  scale_action.checked=(false)
  scale_action.on_triggered do
      
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if scale_action.is_checked?
        options["scale"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["scale"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "scale", scale_action)
  
  #10 Setting verbose mode
  verbose_action = RBA::Action::new
  verbose_action.title = "Verbose mode"
  verbose_action.checkable=(true)
  verbose_action.checked=(false)
  verbose_action.on_triggered do
  
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if verbose_action.is_checked?
        options["verbose"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["verbose"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "verbose", verbose_action)
  
  #11 Setting schematic simplification
  schematic_simple_action = RBA::Action::new
  schematic_simple_action.title = "Schematic simplify"
  schematic_simple_action.checkable=(true)
  schematic_simple_action.checked=(false)
  schematic_simple_action.on_triggered do
      
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if schematic_simple_action.is_checked?
        options["schematic_simple"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["schematic_simple"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "schematic_simple", schematic_simple_action)
  
  #12 Setting netlist only
  net_only_action = RBA::Action::new
  net_only_action.title = "Netlist only"
  net_only_action.checkable=(true)
  net_only_action.checked=(false)
  net_only_action.on_triggered do
      
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if net_only_action.is_checked?
        options["net_only"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml)}
      else
        options["net_only"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml)}
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "net_only", net_only_action)
  
  #13 Setting top level pins
  top_lvl_pins_action = RBA::Action::new
  top_lvl_pins_action.title = "Top level pins"
  top_lvl_pins_action.checkable=(true)
  top_lvl_pins_action.checked=(false)
  top_lvl_pins_action.on_triggered do
      
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if top_lvl_pins_action.is_checked?
        options["top_lvl_pins"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml)}
      else 
        options["top_lvl_pins"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml)}
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "top_lvl_pins", top_lvl_pins_action)
  
  #14 Setting device combine
  combine_action = RBA::Action::new
  combine_action.title = "Devices combine"
  combine_action.checkable=(true)
  combine_action.checked=(false)
  combine_action.on_triggered do
      
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      if combine_action.is_checked?
        options["combine"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["combine"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "combine", combine_action)
  
  #15 Setting purge
  purge_action = RBA::Action::new
  purge_action.title = "Purge"
  purge_action.checkable=(true)
  purge_action.checked=(false)
  purge_action.on_triggered do
  
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml")) 
      
      if purge_action.is_checked?
        options["purge"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["purge"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "purge", purge_action)
  
  #16 Setting purge nets
  purge_nets_action = RBA::Action::new
  purge_nets_action.title = "Purge nets"
  purge_nets_action.checkable=(true)
  purge_nets_action.checked=(false)
  purge_nets_action.on_triggered do
      
      options = YAML.load(File.read(__dir__ + "/lvs_options.yml"))
      if purge_nets_action.is_checked?
        options["purge_nets"] = true
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      else 
        options["purge_nets"] = false
        File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(options.to_yaml) }
      end
    
  end
  mw.menu.insert_item("submenu.lvs_menu.end", "purge_nets", purge_nets_action)
  
  
  #####################################################################################
  # Return to defaults on closing
  #####################################################################################
  
  mw.on_view_closed do
    ## write default options 
    drc_options = {
             "run_mode"=&gt;"flat",
             "variant"=&gt;"C" ,
             "top_cell_name"=&gt;"",
             "verbose"=&gt;"false",
             "feol"=&gt;true,
             "beol"=&gt;true,
             "offgrid"=&gt; "true",
             "connectivity"=&gt;"false" }
    lvs_options = {"sub_name"=&gt;"gf180mcu_gnd",
            "run_mode"=&gt;"flat", 
            "variant"=&gt;"C" ,
            "netlist"=&gt;"" ,
            "spice_net"=&gt;true,
            "top_cell_name"=&gt;"",
            "spice_comment"=&gt;false,
            "scale"=&gt;false,
            "verbose"=&gt;false,
            "schematic_simple"=&gt;false,
            "net_only"=&gt;false,
            "top_lvl_pins"=&gt;false,
            "combine"=&gt;false,
            "purge"=&gt;false,
            "purge_nets"=&gt;false
              }
    File.open(__dir__ + "/drc_options.yml", "w") { |file| file.write(drc_options.to_yaml) }
    File.open(__dir__ + "/lvs_options.yml", "w") { |file| file.write(lvs_options.to_yaml) }
  end

end


</text>
</klayout-macro>
